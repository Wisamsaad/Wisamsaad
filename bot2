#TOKEN = "5043610182:AAGUoJS-kPKv7JV8bO1S--pMLuh3A1oXfqU"
#OWM_KEY = "27fc2444d573596be6704996fafed90c"
# وسام سعد عبدالله المجمعي
#محمد خلف محل البوصكر
#كروه :5
import json, requests, time, urllib, logging, signal
POLLING_TIMEOUT = None
def get_Desc(w):                 return w["weather"][0]["description"]
def get_Temp(w):                 return w["main"]["temp"]
def get_City(w):                 return w["name"]
def get_Text(update):            return update["message"]["text"]
def get_Location(update):        return update["message"]["location"]
def get_ChatId(update):          return update["message"]["chat"]["id"]
def getUpId(update):            return int(update["update_id"])
def get_Result(updates):         return updates["result"]
logger = logging.getLogger("weather-telegram")
cities = ["London", "Brasov", "Moscow"]
def parse_Config():
    global URL, URL_OWM 
    URL = "https://api.telegram.org/bot{}/".format('5043610182:AAGUoJS-kPKv7JV8bO1S--pMLuh3A1oXfqU')
    URL_OWM = "http://api.openweathermap.org/data/2.5/weather?appid={}&units=metric".format('27fc2444d573596be6704996fafed90c')
def handleUpdates(updates):
    for update in get_Result(updates):
        chatId = get_ChatId(update)
        try:
            text = get_Text(update)
        except Exception as e:
            logger.error("No text field in update. Try to get location")
            loc = get_Location(update)
            if (chatId in chats) and (chats[chatId] == "weatherReq"):
                logger.info("Weather requested for %s in chat id %d" % (str(loc), chatId))
                sendMessage(get_Weather(loc), chatId)
                del chats[chatId]
            continue
        if text == "/weather":
            chats[chatId] = "weatherReq"
        elif text.startswith("/"):
            logger.warning("Invalid command %s" % text)    
            continue
        elif (text in cities) and (chatId in chats) and (chats[chatId] == "weatherReq"):
            logger.info("Weather requested for %s" % text)
            sendMessage(get_Weather(text), chatId)
            del chats[chatId] 
def make_Request(url):
    logger.debug("URL: %s" % url)
    r = requests.get(url)
    resp = json.loads(r.content.decode("utf8"))
    return resp
def get_Last_UpdateId(updates):
    ids = []
    for update in get_Result(updates):
        ids.append(getUpId(update))
    return max(ids)
chats = {}
def getUpdates(offset=None):
    url = URL + "getUpdates?timeout=%s" % POLLING_TIMEOUT
    logger.info("Getting updates") 
    if offset:
        url += "&offset={}".format(offset)
    js = make_Request(url)
    return js
def build_Keyboard(items):
    keyboard = [[{"text":item}] for item in items] 
def sendMessage(text, chatId, interface=None):
    text = text.encode('utf-8', 'strict')                                                       
    text = urllib.parse.quote_plus(text)
    url = URL + "sendMessage?text={}&chat_id={}&parse_mode=Markdown".format(text, chatId)
    if interface:
        url += "&reply_markup={}".format(interface)
    requests.get(url)
def get_Weather(place):
    if isinstance(place, dict):    
        lat, lon = place["latitude"], place["longitude"]
        url = URL_OWM + "&lat=%f&lon=%f&cnt=1" % (lat, lon)
        logger.info("Requesting weather: " + url)
        js = make_Request(url)
        logger.debug(js)
        return u"%s \N{DEGREE SIGN}C, %s in %s" % (get_Temp(js), get_Desc(js), get_City(js)) 
    else:                           
        url = URL_OWM + "&q={}".format(place)
        logger.info("Requesting weather: " + url)
        js = make_Request(url)
        logger.debug(js)
        return u"%s \N{DEGREE SIGN}C, %s in %s" % (get_Temp(js), get_Desc(js), get_City(js))
def main():
    parse_Config()# مهم 
    last_update_id = None
    while True:
        updates = getUpdates(last_update_id)
        if len(get_Result(updates)) > 0:
            last_update_id = get_Last_UpdateId(updates) + 1
            handleUpdates(updates)
if __name__ == "__main__":
    main()
